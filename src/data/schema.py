from sqlalchemy import MetaData, Table, Column, UUID, String, DateTime, Float, Boolean, Integer, Text, text

def define_tables(meta: MetaData):
    Table('trades', meta,
        Column('id', UUID, primary_key=True, server_default=text('gen_random_uuid()')),
        Column('transaction_id', UUID, index=True),
        Column('parent_trade_id', UUID, index=True),
        Column('symbol_id', UUID, index=True),
        Column('market_type', String(16), index=True),
        Column('timestamp', DateTime, index=True),
        Column('side', String(8)),
        Column('status', String(20)),
        Column('trade_volume', Float),
        Column('entry_price', Float),
        Column('stop_loss_price', Float),
        Column('take_profit_price', Float),
        Column('signal_volume', Float),
        Column('exit_reason', String(64)),
        Column('order_identifier', String(64)),
        Column('fee_paid', Float),
        Column('profit_realized', Float),
        Column('raw_order_data', Text),
        Column('extra', Text)
    )
    Table('symbols', meta,
        Column('id', UUID, primary_key=True, server_default=text('gen_random_uuid()')),
        Column('symbol', String(32), index=True),
        Column('symbol_type', String),
        Column('base_asset', String(32)),
        Column('quote_asset', String(32)),
        Column('min_qty', Float),
        Column('step_size', Float),
        Column('min_notional', Float),
        Column('tick_size', Float),
        Column('status', String(32)),
        Column('is_spot_trading_allowed', Boolean),
        Column('is_margin_trading_allowed', Boolean),
        Column('contract_type', String(32)),
        Column('leverage', Integer),
        Column('exchange', String(32)),
        Column('created_at', DateTime),
        Column('updated_at', DateTime),
    )
    Table('logs', meta,
        Column('id', UUID, primary_key=True, server_default=text('gen_random_uuid()')),
        Column('transaction_id', UUID, index=True),
        Column('timestamp', DateTime, index=True),
        Column('level', String(16), index=True),
        Column('source', String(64)),
        Column('method', String(64)),
        Column('message', Text)
    )